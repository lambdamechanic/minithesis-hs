name: CI

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GHC_REQUESTED: latest
      CABAL_REQUESTED: latest
    permissions:
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: HLint scan (code scanning)
        uses: haskell-actions/hlint-scan@v1

      - name: Restore ghcup
        id: restore-ghcup
        uses: actions/cache/restore@v4
        with:
          path: ~/.ghcup
          key: ${{ runner.os }}-ghcup-${{ env.GHC_REQUESTED }}
          restore-keys: |
            ${{ runner.os }}-ghcup-
      - name: Set up Haskell
        id: setup-haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ env.GHC_REQUESTED }}
          cabal-version: ${{ env.CABAL_REQUESTED }}

      - name: Save ghcup
        if: steps.restore-ghcup.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.ghcup
          key: ${{ runner.os }}-ghcup-${{ steps.setup-haskell.outputs.ghc-version }}
      - name: Cache Cabal store
        uses: actions/cache@v4
        with:
          path: |
            ~/.cabal/store
            ~/.cabal/packages
            dist-newstyle
          key: ${{ runner.os }}-cabal-${{ hashFiles('cabal.project', '**/*.cabal') }}
          restore-keys: |
            ${{ runner.os }}-cabal-

      - name: Update package index
        run: cabal update

      - name: Install tooling (Ormolu only)
        run: |
          cabal install \
            --ignore-project \
            --installdir="$HOME/.cabal/bin" \
            --overwrite-policy=always \
            ormolu-0.7.7.0

      - name: Ormolu formatting check
        run: |
          files=$(git ls-files '*.hs')
          if [ -n "$files" ]; then
            cabal exec -- ormolu --mode check $files
          fi


      - name: Build (per-component)
        run: |
          cabal build all --enable-tests --enable-per-component

      - name: Run tests with coverage-for library only (Sydtest profile)
        env:
          HSPEC_OPTIONS: "--no-color"
        run: |
          set -euo pipefail
          # Ensure .tix files land in a predictable location
          export HPCTIXDIR="$(pwd)/dist-newstyle"
          # Extract the unit-id of the library component from the plan
          UNIT_ID=$(jq -r '.__"install-plan"[] | select(."pkg-name" == "minithesis" and ."component-name" == "lib") | ."id"' dist-newstyle/cache/plan.json 2>/dev/null || true)
          if [ -z "$UNIT_ID" ]; then
            # Fallback for standard jq (no __ quoting) on most runners
            UNIT_ID=$(jq -r '."install-plan"[] | select(."pkg-name" == "minithesis" and ."component-name" == "lib") | ."id"' dist-newstyle/cache/plan.json)
          fi
          echo "Using cabal --coverage-for=${UNIT_ID}"
          cabal test minithesis-test \
            --enable-coverage \
            --enable-per-component \
            --coverage-for="${UNIT_ID}" \
            --test-show-details=streaming \
            --test-options="--profile" \
            --test-options="--jobs 1"

      - name: Upload sydtest profile
        if: always() && hashFiles('sydtest-profile.html') != ''
        uses: actions/upload-artifact@v4
        with:
          name: sydtest-profile
          path: sydtest-profile.html

      - name: Run CI-only example tests (Hspec, expect failure)
        env:
          HSPEC_OPTIONS: "--no-color"
        run: |
          set -euo pipefail
          if cabal test -f ci-tests examples-hspec --test-show-details=streaming; then
            echo "::error ::examples-hspec unexpectedly succeeded; update the expectation in CI"
            exit 1
          else
            echo "examples-hspec failed as expected"
          fi

      - name: Run CI-only example tests (Tasty)
        run: |
          set -euo pipefail
          cabal test -f ci-tests examples-tasty --test-options='--color=never' --test-show-details=streaming

      - name: Cabal check
        run: cabal check
